    // camera controls
    Qt3DExtras::QOrbitCameraController *camController = new Qt3DExtras::QOrbitCameraController(rootEntity);
    camController->setLinearSpeed( 50.0f );
    camController->setLookSpeed( 180.0f );
    camController->setCamera(cameraEntity);

    // Torus
    Qt3DCore::QEntity *torusEntity = new Qt3DCore::QEntity(rootEntity);
    Qt3DExtras::QTorusMesh *torusMesh = new Qt3DExtras::QTorusMesh;
    torusMesh->setRadius(5);
    torusMesh->setMinorRadius(1);
    torusMesh->setRings(100);
    torusMesh->setSlices(20);

    torusEntity->addComponent(torusMesh);
    torusEntity->addComponent(material);

    // Planar mesh
    Qt3DCore::QEntity *planeEntity = new Qt3DCore::QEntity(rootEntity);
    Qt3DExtras::QPlaneMesh *planeMesh = new Qt3DExtras::QPlaneMesh;
    planeMesh->setHeight(7);
    planeMesh->setWidth(5);

    planeEntity->addComponent(planeMesh);
    planeEntity->addComponent(material);

    // Custom object
    Qt3DCore::QEntity *customEntity = new Qt3DCore::QEntity(rootEntity);
    Qt3DRender::QGeometryRenderer *customGeometryRenderer = new Qt3DRender::QGeometryRenderer;
    Qt3DRender::QGeometry *customGeometry = new Qt3DRender::QGeometry(customGeometryRenderer);
    Qt3DRender::QBuffer *vertexDataBuffer = new Qt3DRender::QBuffer(Qt3DRender::QBuffer::VertexBuffer, customGeometry);
    Qt3DRender::QBuffer *indexDataBuffer = new Qt3DRender::QBuffer(Qt3DRender::QBuffer::IndexBuffer, customGeometry);

    // just 3 vertices (coords + color)
    QByteArray vertexBufferData;
    vertexBufferData.resize(3 * (3 + 3) * sizeof(float));

    QVector3D v0(-3.0f, 1.0f, -3.0f);
    QVector3D v1(-3.0f, 2.0f, -3.0f);
    QVector3D v2(-2.0f, 2.0f, -2.0f);

    QVector3D red(1.0f, 0.0f, 0.0f);
    QVector3D black(0.0f, 0.0f, 0.0f);

    QVector<QVector3D> vertices = QVector<QVector3D>()
            << v0 << red
            << v1 << black
            << v2 << black;

    float *rawVertexArray = reinterpret_cast<float *>(vertexBufferData.data());
    int idx = 0;
    Q_FOREACH (const QVector3D &v, vertices) {
            rawVertexArray[idx++] = v.x();
            rawVertexArray[idx++] = v.y();
            rawVertexArray[idx++] = v.z();
        }

    vertexDataBuffer->setData(vertexBufferData);

    // indexing those vertices
    QByteArray indexBufferData;
    indexBufferData.resize(4 * sizeof(ushort));
    ushort *rawIndexArray = reinterpret_cast<ushort *>(indexBufferData.data());

    rawIndexArray[0] = 0;
    rawIndexArray[1] = 1;

    rawIndexArray[2] = 1;
    rawIndexArray[3] = 2;

    indexDataBuffer->setData(indexBufferData);

    //point material
    Qt3DRender::QMaterial *vertex_material = new Qt3DExtras::QPerVertexColorMaterial(rootEntity);

    //Attributes
    Qt3DRender::QAttribute *positionAttribute = new Qt3DRender::QAttribute();
    positionAttribute->setAttributeType(Qt3DRender::QAttribute::VertexAttribute);
    positionAttribute->setBuffer(vertexDataBuffer);
    positionAttribute->setDataType(Qt3DRender::QAttribute::Float);
    positionAttribute->setDataSize(3);
    positionAttribute->setByteOffset(0);
    positionAttribute->setByteStride(6 * sizeof(float));
    positionAttribute->setCount(3);
    positionAttribute->setName(Qt3DRender::QAttribute::defaultPositionAttributeName());

    Qt3DRender::QAttribute *colorAttribute = new Qt3DRender::QAttribute();
    colorAttribute->setAttributeType(Qt3DRender::QAttribute::VertexAttribute);
    colorAttribute->setBuffer(vertexDataBuffer);
    colorAttribute->setDataType(Qt3DRender::QAttribute::Float);
    colorAttribute->setDataSize(3);
    colorAttribute->setByteOffset(3 * sizeof(float));
    colorAttribute->setByteStride(6 * sizeof(float));
    colorAttribute->setCount(3);
    colorAttribute->setName(Qt3DRender::QAttribute::defaultColorAttributeName());

    Qt3DRender::QAttribute *indexAttribute = new Qt3DRender::QAttribute();
    indexAttribute->setAttributeType(Qt3DRender::QAttribute::IndexAttribute);
    indexAttribute->setBuffer(indexDataBuffer);
    indexAttribute->setDataType(Qt3DRender::QAttribute::UnsignedShort);
    indexAttribute->setDataSize(1);
    indexAttribute->setByteOffset(0);
    indexAttribute->setByteStride(0);
    indexAttribute->setCount(4);

    customGeometry->addAttribute(positionAttribute);
    customGeometry->addAttribute(colorAttribute);
    customGeometry->addAttribute(indexAttribute);
    customEntity->addComponent(vertex_material);

    customGeometryRenderer->setInstanceCount(1);
    customGeometryRenderer->setGeometry(customGeometry);
    customGeometryRenderer->setPrimitiveType(Qt3DRender::QGeometryRenderer::PrimitiveType::Lines);
    customGeometryRenderer->setVertexCount(4); //num of points

    customEntity->addComponent(customGeometryRenderer);










        //Antialiasing?
        QSurfaceFormat format;
    #ifdef QT_OPENGL_ES_2
        format.setRenderableType(QSurfaceFormat::OpenGLES);
    #else
        if (QOpenGLContext::openGLModuleType() == QOpenGLContext::LibGL) {
            format.setVersion(4, 3);
            format.setProfile(QSurfaceFormat::CoreProfile);
        }
    #endif
        format.setDepthBufferSize(24);
        format.setSamples(4);
        format.setStencilBufferSize(8);
        QSurfaceFormat::setDefaultFormat(format);

        //https://github.com/nezticle/MahjongSolitaire/blob/master/mahjongtileentity.cpp
        //https://github.com/qt-labs/qt3d-editor/blob/master/editorlib/src/editorscene.cpp



















        //QObject::connect(cameraEntity, &Qt3DRender::QCamera::viewMatrixChanged, [&]()
            //{ lightTransform->setTranslation(cameraEntity->position()); }); //make light follow camera




/*if(!selection_box){
            cout << "components: " << ent->components().size() << endl;
            for(Qt3DCore::QComponent* comp :  ent->components()){
                if(comp->inherits("Qt3DRender::QGeometryRenderer")){
                    auto geometryRenderer =  qobject_cast<Qt3DRender::QGeometryRenderer*>(comp);
                    cout << "boundingVolumePositionAttribute: " << geometryRenderer->geometry()->boundingVolumePositionAttribute() << endl;
                    //comp->dumpObjectInfo();
                }
            }

        }*/